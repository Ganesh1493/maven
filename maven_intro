Maven is a powerful build automation and project management tool primarily used for Java projects. It's an open source software 
which is purely written in java (java based tool). However, can be used to build and manage projects written in any other language.

******************** It falls under the category of build tools in the DevOps ecosystem ********************************

Here are some key aspects of Maven in DevOps:
=============================================

1. Dependency Management: Maven simplifies the process of managing external libraries and dependencies for a project. 
It automatically downloads the required libraries from a central repository and includes them in the build.

2. Build Automation: Maven handles the build lifecycle of a project. It provides a set of predefined build phases 
(e.g., compile, test, package, install) that can be executed in a sequential manner. This makes it easier to create a consistent build process.

3. Project Object Model (POM): Maven uses a Project Object Model, which is an XML file (pom.xml) that describes the project and its configuration. 
This includes information like project dependencies, version numbers, build settings, and more.

4. Centralized Repository: Maven uses a central repository (Maven Central Repository) to store and distribute libraries and plugins. 
This makes it easy to share and manage dependencies across different projects and teams.

5. Plugin Architecture: Maven supports a wide range of plugins that extend its functionality. These plugins can be used for tasks like 
code compilation, testing, packaging, deployment, and more.

6. Consistency: With Maven, project builds are consistent across different environments and development machines. 
This helps in reducing potential issues related to environment-specific configurations.

7. Convention over Configuration: Maven follows the principle of convention over configuration. This means that it provides sensible default settings, 
reducing the need for extensive configuration files.

8. Phases and Goals: Maven defines a set of build phases (e.g., compile, test, package) and within each phase, 
there are specific goals (e.g., compile goal within the compile phase). Developers can bind plugins to these phases and goals to execute specific tasks.

9. Dependency Scope: Maven allows you to specify the scope of a dependency (e.g., compile, provided, test) which determines when and where the dependency 
will be available during the build process.

#################################################################################################################################

==> Using maven, we'll build the project code and it generates a single build file also called as artifact (all supported files
to run the application are bundled together).

==> In real-time scenarios in any organization/in any project/in any programming, we'll working with some thousands of files.
To compile these thousands of files, we require lot of dependencies which we can't download manually and we can't arrange
them in proper directories manually.

==> Here, maven is providing us a project structure using which a predefined project strcuture should be developed. Then, we can 
upload all our project related files inside that so maven will manage the project automatically hence no need for us to 
understand or download which dependency is required by visiting websites.

Different programming languages have different build files:
-----------------------------------------------------------
c++ ================>  tar.gz
Java programming====> .jar
web application=====> .war
enterprize app======> .ear
.net programming====> .msi, .dll, .exe

******************** Every command in maven starts with 'mvn' *****************************

3 built-in life cycles of Maven build:
1. Default :23 phases
2. clean   :3 phases
3. site    :4 phases

Installing Maven in Linux OS (short cut):
========================================

# apt update -y
# apt install default-jdk -y
# apt install maven -y

# apt update - && apt install default-jdk -y && apt install maven -y

mvn --version

Installing Maven in Linux OS (Binary method):
=============================================
# apt update -y
# apt install default-jdk -y

*********** Most of the times, 3rd party softwares/tools will be installed in '/opt' folder *************

# Go to maven official website (maven.apache.org/download.cgi) and you'll be able to see the latest version
# Always remember to download tar.gz file, right click on link and copy link address
# To download using command line, use wget command

Either first go to /opt folder by using 'cd /opt' and then download maven or after downloading, move it into /opt folder

# wget <paste the copied link address of maven>
# It'll download a zip file, we need to unzip it
# Finally, we need to install it by unzipping or extracting under '/opt' folder
# tar -xvzf <zip file>

# Next, we need to set/define 2 environmental variables (Home & Path) inorder for OS to understand where the maven is installed

***** Command line or Terminal ******

# export M2_HOME=/opt/apache
# export PATH=$PATH:$M2_HOME/bin

# mvn --version

********************* Maven supports 3,000+ project structures ****************************
Depending on different frameworks/projects/technology, we have different project structures

I have an application requirement to build an artifact which is .jar (java archive) file

If you want to create or generate a project structure use the commmand 'mvn archetype:generate' 
Maven is maintaining an online repository where it is storing all the supported project structures. All the maven related stuff, 
it is downloading from the central repository.

# apt install tree -y
# tree .

############ Pom.xml file (Project Object Model) ##############
Elements:

project
modelVersion
groupId
artifactId
packaging
version

In order to run/build pure java project/app, we need to create a project structure number: ****
Development manager will be giving us this information because they're the ones who'll decide what project
or structure they're going to create

.jar (Java archive) file will be generated

******************** Important phases in Default build life cycle = validate + compile + test + package ********************

mvn validate
mvn compile
mvn test
mvn package
mvn clean

############################################################################################################

Next, I have an application requirement to build a different artifact which is .war (web archive) file

.jar file is a local pure Java application
.war file is a web application where it can be deployed or viewed over web interface (Url/Web browser): .jsp (java server pages) files

1. mvn archetype:generate
2. sample project structure number: **** (choose this from the project structure list)
3. always choose latest version
4. generating pom.xml file, define values
5. Enter 'Y'
6. Hit Enter

Build will be success, then navigate to that project directory

tree .
vi pom.xml
cd /src/main/webapp
vi index.jsp
cd ../../..

mvn validate
mvn compile
mvn test
mvn package

tree .
Output: .war file

If you're running .html file or writing .html code, that is static website. To view it, we need a webserver
like nginx/httpd etc

To see/check/view a .war file or project over the web, we need a Java based web application server. This will
process some information and show the output on the screen. Once of the popular web application server is
Tomcat. 

If we install it on a server, it'll become web application server. On that web application server, 
we can deploy/install/configure .war file so that whatever the content or code we've written inside
.war project, will be displayed on the web application server.

